//package com.dxc.controller;
//
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.http.HttpStatus;
//import org.springframework.http.ResponseEntity;
//import org.springframework.web.bind.annotation.*;
//
//import com.dxc.dto.JwtAuthenticationResponse;
//import com.dxc.dto.RefreshTokenRequest;
//import com.dxc.dto.SignUpRequest;
//import com.dxc.dto.SigninRequest;
//import com.dxc.model.User;
//import com.dxc.service.AuthenticationService;
//
//@RestController
//@RequestMapping("/api/v1/auth")
//public class AuthenticationController {
//
//    private final AuthenticationService authenticationService;
//
//    @Autowired
//    public AuthenticationController(AuthenticationService authenticationService) {
//        this.authenticationService = authenticationService;
//    }
//
//    @PostMapping("/signup")
//    public ResponseEntity<?> signup(@RequestBody SignUpRequest signUpRequest) {
//        try {
//            User newUser = authenticationService.signup(signUpRequest);
//            return ResponseEntity.status(HttpStatus.CREATED).body(newUser);
//        } catch (IllegalArgumentException e) {
//            return ResponseEntity.badRequest().body(e.getMessage());
//        }
//    }
//
//    @PostMapping("/signin")
//    public ResponseEntity<?> signin(@RequestBody SigninRequest signinRequest) {
//        try {
//            JwtAuthenticationResponse response = authenticationService.signin(signinRequest);
//            return ResponseEntity.ok(response);
//        } catch (Exception e) {
//            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
//        }
//    }
//
//    @PostMapping("/refresh")
//    public ResponseEntity<?> refresh(@RequestBody RefreshTokenRequest refreshTokenRequest) {
//        try {
//            JwtAuthenticationResponse response = authenticationService.refreshToken(refreshTokenRequest);
//            return ResponseEntity.ok(response);
//        } catch (Exception e) {
//            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid token");
//        }
//    }
//}


//package com.dxc.controller;
//
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.http.HttpStatus;
//import org.springframework.http.ResponseEntity;
//import org.springframework.web.bind.annotation.PostMapping;
//import org.springframework.web.bind.annotation.RequestBody;
//import org.springframework.web.bind.annotation.RequestMapping;
//import org.springframework.web.bind.annotation.RestController;
//
//import com.dxc.dto.JwtAuthenticationResponse;
//import com.dxc.dto.RefreshTokenRequest;
//import com.dxc.dto.SignUpRequest;
//import com.dxc.dto.SigninRequest;
//import com.dxc.model.User;
//import com.dxc.service.AuthenticationService;
//
//@RestController
//@RequestMapping("/api/v1/auth")
//public class AuthenticationController {
//
//    @Autowired
//    private AuthenticationService authenticationService;
//
//    @PostMapping("/signup")
//    public ResponseEntity<?> signup(@RequestBody SignUpRequest signUpRequest) {
//        try {
//       
//
//            User newUser = authenticationService.signup(signUpRequest);
//            return ResponseEntity.status(HttpStatus.CREATED).body(newUser);
//        } catch (IllegalArgumentException e) {
//            return ResponseEntity.badRequest().body("Invalid signup request: " + e.getMessage());
//        } catch (Exception e) {
//            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
//                    .body("An error occurred during signup: " + e.getMessage());
//        }
//    }
//
//    @PostMapping("/signin")
//    public ResponseEntity<?> signin(@RequestBody SigninRequest signinRequest) {
//        try {
//            JwtAuthenticationResponse response = authenticationService.signin(signinRequest);
//            return ResponseEntity.ok(response);
//        } catch (Exception e) {
//            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
//                    .body("An error occurred during signin: " + e.getMessage());
//        }
//    }
//
//    @PostMapping("/refresh")
//    public ResponseEntity<?> refresh(@RequestBody RefreshTokenRequest refreshTokenRequest) {
//        try {
//            JwtAuthenticationResponse response = authenticationService.refreshToken(refreshTokenRequest);
//            return ResponseEntity.ok(response);
//        } catch (Exception e) {
//            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
//                    .body("An error occurred during token refresh: " + e.getMessage());
//        }
//    }
//}


package com.dxc.controller;

import com.dxc.dto.JwtAuthenticationResponse;
import com.dxc.dto.RefreshTokenRequest;
import com.dxc.dto.SignUpRequest;
import com.dxc.dto.SigninRequest;
import com.dxc.model.User;
import com.dxc.service.AuthenticationService;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/v1/auth")
@RequiredArgsConstructor
public class AuthenticationController {

    @Autowired
    private AuthenticationService authenticationService;

    @PostMapping("/signup")
    public ResponseEntity<?> signup(@RequestBody SignUpRequest signUpRequest) {
        if (signUpRequest == null || StringUtils.isEmpty(signUpRequest.getPassword())) {
            return ResponseEntity.badRequest().body("Invalid signup request: Password cannot be null or empty");
        }

        try {
            User user = authenticationService.signup(signUpRequest);
            return ResponseEntity.ok(user);
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error signing up user");
        }
    }

    @PostMapping("/signin")
    public ResponseEntity<JwtAuthenticationResponse> signin(@RequestBody SigninRequest signinRequest) {
        return ResponseEntity.ok(authenticationService.signin(signinRequest));
    }

    @PostMapping("/refresh")
    public ResponseEntity<JwtAuthenticationResponse> refresh(@RequestBody RefreshTokenRequest refreshTokenRequest) {
        return ResponseEntity.ok(authenticationService.refreshToken(refreshTokenRequest));
    }
}
